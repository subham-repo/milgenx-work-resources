<!-- CSS -->
<link rel="stylesheet" href="https://unpkg.com/flickity@2/dist/flickity.min.css"></link>

<!-- JavaScript -->
<script src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"></script>

{%- liquid
    assign show_mobile_slider = false
    if section.settings.swipe_on_mobile == true
      assign show_mobile_slider = true
    endif
  
    assign show_tab_slider = false
    if section.settings.swipe_on_tab == true
      assign show_tab_slider = true
    endif
  
    assign show_desktop_slider = false
    if section.settings.enable_desktop_slider == true
      assign show_desktop_slider = true
    endif
  -%}

<div id="Slider-{{ section.id }}" class="slider-row {% if show_mobile_slider or show_desktop_slider %}init-flickity-{{ section.id }}{% endif %} multicolumn-list contains-content-container {% if show_desktop_slider == false %}no-swipe-desktop{% endif %} {% if section.settings.show_selected == true %}show-selected-slide{% endif %} {% if section.settings.enable_marquee %}marquee-enabled{% endif %} {% if section.settings.show_overflow == true %}show-overflow{% endif %} {% if section.settings.swipe_on_mobile == false %}no-swipe-mobile{% endif %}{% comment %}{% if show_mobile_slider %} slider slider--mobile grid--peek{% endif %}{% endcomment %} {% if show_mobile_slider or show_desktop_slider %}is-flickity-slider  slides-alignment--{{ section.settings.slider_mode }}{% endif %}">
     <!-- Render Slide Elements Here -->
</div>     

<script>
  {% if show_mobile_slider == true  or show_desktop_slider == true %}
    function initializeFlickity{{ section.index }}(elemTarget){

      function videoControls(target){
        let slides = target.cells;
        slides.forEach(function(slide){
          let element = slide.element;
          setTimeout(function(){
            if(element.querySelector("video")){
              element.querySelector("video").pause();
              element.querySelector("video").removeAttribute("src");   

              slides.forEach(function(elem, idx, slides){
               if (idx === slides.length - 1){ 
                     // console.log("Last callback call at index " + idx + " with value " + elem );
                    if(element.classList.contains("is-selected")){
                      element.querySelector("video").setAttribute("src", element.querySelector("video").getAttribute("video-src"));
                      element.querySelector("video").play(); 
                    }
                 }
              });
            }
          }, 500)
        })
      }
      
      let elem = elemTarget;
      console.log(elem)
      

      {% if section.settings.enable_marquee == true %}
        let options = {
          accessibility: true,
          resize: true,
          wrapAround: true,
          prevNextButtons: false,
          pageDots: false,
          percentPosition: true,
          setGallerySize: true,
        }

        var flkty = new Flickity(elem, options);
        
        // Set initial position to be 0
        flkty.x = 0;
        
        // Start the marquee animation
        play();
        
        // Main function that 'plays' the marquee.
        function play() {
          // Set the decrement of position x
          flkty.x -= 1.5;
        
          // Settle position into the slider
          flkty.settle(flkty.x);
        
          // Set the requestId to the local variable
          requestId = window.requestAnimationFrame(play);
        }
        
        // Main function to cancel the animation.
        function pause() {
          if(requestId) {
            // Cancel the animation
            window.cancelAnimationFrame(requestId)
        
            // Reset the requestId for the next animation.
            requestId = undefined;
          }
        }
        
        // Pause on hover/focus
        document.querySelector(elem).addEventListener('mouseenter', e => {
          console.log("mouseenter");
          pause();
        })
        
        // Unpause on mouse out / defocus
        document.querySelector(elem).addEventListener('mouseleave', e => {
          play();
        })
      {% else %}
        let options = { 
          freeScroll: true,
          wrapAround: {% if section.settings.slider_mode == 'center' or section.settings.show_arrows %}true {% else %}{{ section.settings.enable_autoplay }}{% endif %}, 
          imagesLoaded: true, 
          lazyLoad: true, 
          adaptiveHeight: false, 
          cellAlign: '{{ section.settings.slider_mode }}', 
          continuousAutoPlay: true, 
          // groupCells: false, 
          // watchCSS: false, 
          contain: true, 
          prevNextButtons: {{ section.settings.show_arrows }}, 
          pageDots: {{ section.settings.show_dot }}, 
          {% if section.settings.enable_autoplay == true %}autoPlay: {{ section.blocks.size }}000, {% endif %}
          dragThreshold: 8, 
          arrowShape: {"x0": 20, "x1": 60, "y1": 40, "x2": 60, "y2": 35, "x3": 25},
          selectedAttraction: 0.2,
          friction: 0.8,
          on: {
            ready: function() {
              // console.log('Flickity is ready');
              videoControls(this)
            },
            change: function( index ) {
              // console.log( 'Slide changed to' + index );
              // console.log(this)
              videoControls(this)
            }
          }
        }

        var flkty = new Flickity(elem, options);
      {% endif %}

      
      
      if(document.querySelector(elem).classList.contains("no-swipe-mobile") == true){
        console.log("no-swipe-mobile");
        if(matchMedia('(max-width:749px)').matches){
            var flkty = new Flickity(elem, options)
            flkty.destroy()
        }
      }

      if(document.querySelector(elem).classList.contains("no-swipe-desktop") == true){
        console.log("no-swipe-desktop "+elem);
        if(matchMedia('(min-width:750px)').matches){
            var flkty = new Flickity(elem, options)
            flkty.destroy()
        }
      }
    }
  
    document.addEventListener("DOMContentLoaded", function(){
      initializeFlickity{{ section.index }}(".init-flickity-{{ section.id }}")
    })
    window.addEventListener("resize", function(){
      initializeFlickity{{ section.index }}(".init-flickity-{{ section.id }}")
    })
  {% endif %}

  {% if section.settings.video-play-event == 'in-screen' %}
    // Select all video cards
    let {{ section.id | remove: "-" }}videoCards = document.querySelectorAll("#{{ section.id | remove: "-" }} video.video-div");

    // Function to load and play video
    function loadVideo(video) {
      if (!video.getAttribute('src')) {
        const videoSrc = video.getAttribute('video-src');
        if (videoSrc) {
          video.setAttribute('src', videoSrc);
          video.load();
          video.play();
        }
      } else {
        video.play(); // If already loaded, just play
      }
    }

    // Function to pause and reset video
    function unloadVideo(video) {
      video.pause();
      video.currentTime = 0;
      // Optional: Uncomment below to unload the video to save memory
      // video.removeAttribute('src');
      // video.load();
    }
  
    // Intersection Observer to detect when videos enter viewport
    let {{ section.id | remove: "-" }}observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          loadVideo(entry.target);
        }
      });
    }, {
      threshold: 0.25 // Trigger when 25% of the video is visible
    });

    {{ section.id | remove: "-" }}videoCards.forEach(video => {
      {{ section.id | remove: "-" }}observer.observe(video);
    })
  {% endif %}

  {% if section.settings.video-play-event == 'on-hover' %}
    // Select all video cards
    let {{ section.id | remove: "-" }}videoCards = document.querySelectorAll("#{{ section.id | remove: "-" }} video.video-div");
    
    // Function to load and play video
    function loadVideo(video) {
      if (!video.getAttribute('src')) {
        const videoSrc = video.getAttribute('video-src');
        if (videoSrc) {
          video.setAttribute('src', videoSrc);
          video.load();
          video.play();
        }
      } else {
        video.play(); // If already loaded, just play
      }
    }
    
    // Function to pause and reset video
    function unloadVideo(video) {
      video.pause();
      video.currentTime = 0;
      // Optional: Uncomment below to unload the video to save memory
      // video.removeAttribute('src');
      // video.load();
    }
    
    // Attach observer and hover listeners
    {{ section.id | remove: "-" }}videoCards.forEach(video => {
      video.addEventListener('mouseenter', () => {
        loadVideo(video);
      });
    
      video.addEventListener('mouseleave', () => {
        unloadVideo(video);
      });
    });
  {% endif %}
</script>

<!-- Schema JSON -->

  {
      "type": "header",
      "content": "Slider Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_desktop_slider",
      "label": "Enable Desktop Slider",
      "default": false
    },
    {
      "type": "checkbox",
      "id": "swipe_on_mobile",
      "default": false,
      "label": "Enable Mobile Slider"
    },
    {
      "type": "checkbox",
      "id": "show_dot",
      "default": false,
      "label": "Enable Dots"
    },
    {
      "type": "checkbox",
      "id": "show_arrows",
      "default": false,
      "label": "Enable Arrows"
    },
    {
      "type": "checkbox",
      "id": "enable_autoplay",
      "default": false,
      "label": "Enable Autoplay"
    },
    {
      "type": "checkbox",
      "id": "show_selected",
      "default": false,
      "label": "Show Selected"
    },
    {
      "type": "checkbox",
      "id": "show_overflow",
      "default": false,
      "label": "Show Overflow"
    },
    {
      "type": "checkbox",
      "id": "enable_marquee",
      "default": false,
      "label": "Enable Marquee"
    },
    {
      "type": "select",
      "id": "slider_mode",
      "options": [
        {
          "value": "left",
          "label": "Left"
        },
        {
          "value": "center",
          "label": "Center"
        },
        {
          "value": "right",
          "label": "Right"
        }
      ],
      "default": "left",
      "label": "Slider Cell Alignment"
    },