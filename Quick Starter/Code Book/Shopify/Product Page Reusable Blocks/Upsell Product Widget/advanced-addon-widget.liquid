<!-- snippets/product-upsell-snippet.liquid -->

<!-- CSS -->
<link rel="stylesheet" href="https://unpkg.com/flickity@2/dist/flickity.min.css"></link>

<!-- JavaScript -->
<script src="https://unpkg.com/flickity@2/dist/flickity.pkgd.min.js"></script>

{%- liquid
    assign show_mobile_slider = false
    if block.settings.swipe_on_mobile == true
      assign show_mobile_slider = true
    endif
  
    assign show_tab_slider = false
    if block.settings.swipe_on_tab == true
      assign show_tab_slider = true
    endif
  
    assign show_desktop_slider = false
    if block.settings.enable_desktop_slider == true
      assign show_desktop_slider = true
    endif
-%}

{% assign upselllist = product.metafields.custom.upsell_products.value %}
{% assign upselllistCount = product.metafields.custom.upsell_products.size %}
{% assign collection_handle = upsellCollection | default: "stools" %}
{% if upselllist %}
<div class="product-upsell-wrapper">
  <b class="heading h4">{{ block.settings.title | default: "Complete Your Set" }}</b>
  <div id="Slider-{{ block.id }}"  class="product-upsell layout--{{ block.settings.layout_style }} {% if block.settings.enable_slider  %}is-flickity-slider init-flickity-{{ block.id }} {% if show_desktop_slider == false %}no-swipe-desktop{% endif %} {% if show_tab_slider == false %}no-swipe-tab{% endif %} {% if block.settings.swipe_on_mobile == false %}no-swipe-mobile{% endif %}{% endif %}">
    {% for upsellProduct in upselllist limit: 10 %}
      {% assign upsellProduct = all_products[upsellProduct] %}
      {% assign have-color = false %}
      {% unless upsellProduct.handle == product.handle %}
      <div class="upsell-item">
        <div class="upsell-item-banner">
          <a href="{{ upsellProduct.url }}"><img src="{{ upsellProduct.featured_image | img_url: "280x" }}" alt="{{ product.title }}" width="100%" height="" /></a>
        </div>
        <div class="upsell-item-info">
          {% assign p_title = upsellProduct.title | split: ' - ' %}
          <div class="upsell-item-info-content">
          <a href="{{ upsellProduct.url }}"><strong>{{- p_title | last -}}</strong></a>
          {% for option in upsellProduct.options_with_values %}
            {% if option.name contains "Colors" or option.name contains "Color" %}
            {% assign havecolor = true %}
            {% assign activecolor = upsellProduct.selected_or_first_available_variant.title | split: "/" | first | handle %}
            {% for value in option.values %}
              {% assign optionvalue = value | handle %}
              {% if optionvalue == activecolor %}
              <span class="selected-color">{{ value }}</span>
              {% endif %}
            {% endfor %}
            {% endif %}
          {% endfor %}
          <span>
            {% comment %}
              {{- upsellProduct.selected_or_first_available_variant.price 
            | money_without_trailing_zeros 
            | replace: ",", "" 
            | replace: ".", "" -}}
            {% endcomment %}

            {{- upsellProduct.selected_or_first_available_variant.price 
            | money -}}
          </span>
          </div>
          <form method="post" action="/cart/add" id="product_form_{{ upsellProduct.selected_or_first_available_variant.id }}" accept-charset="UTF-8" class="upsellproduct-form product-form product-form--payment-button" enctype="multipart/form-data">
          <input type="hidden" name="form_type" value="product">
          <input type="hidden" name="utf8" value="✓">
          <input type="hidden" name="quantity" value="1">
          <input type="hidden" name="product-id" value="{{ upsellProduct.id }}">
          <input type="hidden" name="id" value="{{ upsellProduct.selected_or_first_available_variant.id }}">


          {% if upsellProduct.variants.size > 0 and upsellProduct.has_only_default_variant == false %}
          <select>
            {% for variant in upsellProduct.variants %}
              {% if have-color == true %}
                {% assign variant_name = variant.title | split: "/" %}
                {% assign variant_name_without_first = variant_name | slice: 1, variant_name.size %}
                {% assign variant_name_joined = variant_name_without_first | join: " / " %}
              {% else %}
                {% assign variant_name_joined = variant.title %}
              {% endif %}
              
              <option raw-value="{{ variant.title }}" value="{{ variant.id }}">{{ variant_name_joined }}</option>
            {% endfor %}

          </select>
          {% endif %}
          {% comment %}
            {% for option in upsellProduct.options_with_values %}
              {% for value in option.values %}
                {{ value }}
              {% endfor %}
            {% endfor %}
          {% endcomment %}
          

          {% if upsellProduct.available %}
          <button type="button" {% for item in cart.items %}{{ item.product_id }}--{{ upsellProduct.id }} {% if item.product_id == upsellProduct.id %}cart-index="{{ item.key }}" in-cart="true" cart-item-id="{{ item.id }}" {% break %}{% endif %}{% endfor %} {% comment %}onclick="addToCart({{ upsellProduct.selected_or_first_available_variant.id }}, 1, event);"{% endcomment %} name="add" btn-text="Add to Cart" class="ProductForm__AddToCart btn btn--primary small {% if block.settings.layout_style == 'list' and block.settings.button_style == 'standard' %}btn-circle{% elsif block.settings.button_style == 'switch' %}btn-switch{% endif %}">{% if block.settings.layout_style != 'list' %}<span>Add to Cart</span>{% else %}<span>{% render "icon-cart" %}</span>{% endif %}</button>
          {% else %}
          <b>Sold Out</b>
          {% endif %}
          </form>

          

          {% comment %}
          <form method="post" action="/cart/add" id="AddToCartForm-template--18811183235286__main" accept-charset="UTF-8" class="product-form   product-form--payment-button" enctype="multipart/form-data"><input type="hidden" name="form_type" value="product"><input type="hidden" name="utf8" value="✓">
              <select name="id" id="ProductSelect-template--18811183235286__main" class="product-form__variants no-js">
                  <option selected="selected" data-sku="P29-BK" value="44784397353174">
                      Default Title - $49.00 USD
                  </option>
              </select>
              <div class="product-form__quantity-submit pt-1">
                   <div class="product-form__item product-form__item--submit ">
                    <button type="submit" name="add" id="AddToCart-template--18811183235286__main" class="btn btn--full btn-theme product-form__cart-submit product-form__cart-submit--outline">
                      <span id="AddToCartText-template--18811183235286__main">
                          Add to Cart
                      </span>
                    </button>
                  </div>
              </div>
            <input type="hidden" name="product-id" value="8257021182166"><input type="hidden" name="section-id" value="template--18811183235286__main">
          </form>
          {% endcomment %}
        </div>
      </div>
      {% endunless %}
    {% endfor %}
  </div>
</div>
{% endif %}

<script>
  function addToCart(variantId, quantity = 1, e) {
  if (!variantId) {
    console.error("❌ Variant ID is required.");
    return;
  }

  let button = e.target;

  {% if block.settings.layout_style != 'list' %}
    button.textContent = "Adding...";
  {% endif %}
  button.disabled = true;

  const data = {
    id: variantId,
    quantity: quantity,
  };

  fetch("/cart/add.js", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify(data),
  })
    .then((response) => {
      if (!response.ok) {
        throw new Error("Failed to add product to cart. " + response.statusText);
      }
      return response.json();
    })
    .then(() => {
      {% if block.settings.layout_style != 'list' %}
        button.textContent = "Added to Cart";
      {% else %}
        button.setAttribute("in-cart", "true");
      {% endif %}
    })
    .then(() => {
      // Wait 500ms to ensure Shopify updates cart session
      return new Promise(resolve => setTimeout(resolve, 500));
    })
    .then(() => fetch("/cart.js"))
    .then(res => res.json())
    .then(cart => {
      cart.items.forEach(function(item){
        console.log(item.variant_id, variantId)
        if(Number(item.variant_id) === Number(variantId)){
          const added = item;
        }
      })
      console.log(cart.items, {variantId})
      if (added) {
        console.log("✅ Variant added. Line item key:", added.key);
        button.setAttribute("cart-key", added.key);
      } else {
        console.warn("⚠️ Added item not found in cart.");
      }
    })
    .catch((error) => {
      console.error("❌ Error adding product to cart:", error);
      {% if block.settings.layout_style != 'list' %}
        button.textContent = "Error Adding";
        setTimeout(() => {
          button.textContent = "Add to Cart";
          button.disabled = false;
        }, 2000);
      {% endif %}
    })
    .finally(() => {
      {% if block.settings.layout_style == 'list' %}
        setTimeout(() => {
          button.disabled = false;
        }, 2000);
      {% endif %}
    });
}

  function removeFromCart(lineItemIndex, e) {
    console.log(lineItemIndex)
    fetch('/cart/change.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        id: lineItemIndex,
        quantity: 0
      })
    })
    .then(res => res.json())
    .then(data => {
      console.log('Removed item from cart:', data);
      let button = e.target;
      button.setAttribute("in-cart", "false");
      button.removeAttribute("cart-index", "false");
      
      // Optional: refresh cart drawer or UI
      // refreshCartDrawer();
    })
    .catch(error => {
      console.error('Error removing item:', error);
    });
  }

  let upsellForms = document.querySelectorAll(".product-upsell .upsell-item form");
  upsellForms.forEach(function(upsellForm){
      let upsellVariantIdField = upsellForm.querySelector("input[name=id]");
      let upsellQuantityField = upsellForm.querySelector("input[name=quantity]");
    
      let upsellVariantSelect = upsellForm.querySelector("select");
      if(upsellVariantSelect){
        upsellVariantSelect.addEventListener("change", function(){
            let upsellVariantId = upsellVariantSelect.value;
            upsellVariantIdField.value = upsellVariantId;
            console.log({upsellVariantId});
        })
      }

      let addUpsell = upsellForm.querySelector("button[type=button]");
      if(addUpsell){
        
        addUpsell.addEventListener("click", function(e){
          let upsellVariantId = upsellVariantIdField.value;
          let upsellQuantity = upsellQuantityField.value;
          if(addUpsell.classList.contains("btn-switch") && addUpsell.getAttribute("in-cart") == "true"){
            let itemIndex = addUpsell.getAttribute("cart-index");
            removeFromCart(itemIndex, e);
          }else{
            addToCart(upsellVariantId, upsellQuantity, e);
          }
        })
      }
  })

  // Example usage: Replace `123456789` with a valid variant ID
  const variantId = 123456789; // Replace with the actual variant ID
  const quantity = 2; // Change the quantity as needed
  // addToCart(variantId, quantity);
</script>

<script>
  {% if show_mobile_slider == true  or show_desktop_slider == true %}
    function initializeFlickity{{ block.index }}(elemTarget){

      function videoControls(target){
        let slides = target.cells;
        slides.forEach(function(slide){
          let element = slide.element;
          setTimeout(function(){
            if(element.querySelector("video")){
              element.querySelector("video").pause();
              element.querySelector("video").removeAttribute("src");   

              slides.forEach(function(elem, idx, slides){
                if (idx === slides.length - 1){ 
                      // console.log("Last callback call at index " + idx + " with value " + elem );
                    if(element.classList.contains("is-selected")){
                      element.querySelector("video").setAttribute("src", element.querySelector("video").getAttribute("video-src"));
                      element.querySelector("video").play(); 
                    }
                  }
              });
            }
          }, 500)
        })
      }
      
      let elem = elemTarget;
      console.log(elem)
      let options = { 
        freeScroll: true,
        wrapAround: {% if block.settings.slider_mode == 'center' or block.settings.show_arrows %}true {% else %}{{ block.settings.enable_autoplay }}{% endif %}, 
        imagesLoaded: false, 
        lazyLoad: true, 
        adaptiveHeight: false, 
        cellAlign: '{{ block.settings.slider_mode }}', 
        continuousAutoPlay: true, 
        // groupCells: false, 
        // watchCSS: false, 
        contain: false, 
        prevNextButtons: {{ block.settings.show_arrows }}, 
        pageDots: {{ block.settings.show_dot }}, 
        {% if block.settings.enable_autoplay == true %}autoPlay: {{ block.blocks.size }}000, {% endif %}
        dragThreshold: 8, 
        {% if block.settings.light_arrows == true %}arrowShape: {"x0": 20, "x1": 60, "y1": 40, "x2": 60, "y2": 35, "x3": 25},{% endif %}
        selectedAttraction: 0.2,
        friction: 0.8,
        on: {
          ready: function() {
            // console.log('Flickity is ready');
            videoControls(this)
          },
          change: function( index ) {
            // console.log( 'Slide changed to' + index );
            // console.log(this)
            videoControls(this)
          }
        }
      }

      var flkty = new Flickity(elem, options);
      
      if(document.querySelector(elem).classList.contains("no-swipe-mobile") == true){
        console.log("no-swipe-mobile");
        if(matchMedia('(max-width:749px)').matches){
            var flkty = new Flickity(elem, options)
            flkty.destroy()
        }
      }

      if(document.querySelector(elem).classList.contains("no-swipe-tab") == true){
        console.log("no-swipe-desktop "+elem);
        if(matchMedia('(min-width:750px) and (max-width:1200px)').matches){
            var flkty = new Flickity(elem, options)
            flkty.destroy()
        }
      }
      
      if(document.querySelector(elem).classList.contains("no-swipe-desktop") == true){
        console.log("no-swipe-desktop "+elem);
        if(matchMedia('(min-width:1201px)').matches){
            var flkty = new Flickity(elem, options)
            flkty.destroy()
        }
      }
    }
    document.addEventListener("DOMContentLoaded", function(){
      initializeFlickity{{ block.index }}(".init-flickity-{{ block.id }}")
    })
    window.addEventListener("resize", function(){
      initializeFlickity{{ block.index }}(".init-flickity-{{ block.id }}")
    })
  {% endif %}
</script>

<style>
  .product-upsell-wrapper { margin-top: 30px; }
  .product-upsell .upsell-item .upsell-item-banner a { display: flex; width: 100%; }
  .product-upsell:not(.flickity-enabled) .product-upsell {
      display: flex;
      column-gap: 15px;
      row-gap: 15px;
      flex-wrap: wrap;
  }
  .product-upsell .upsell-item .upsell-item-info select {
      width: 100%;
      max-width: 100%;
      height: 30px;
      font-size: 12px;
      outline: none;
      color: #000;
  }
  .product-upsell.layout--list .upsell-item {
      width: 100%;
      display: flex;
      flex-flow: row;
      background-color: #e9e9e9;
  }
  .product-upsell.flickity-enabled {
      margin-bottom: 60px;
      position: relative;
  }
  .product-upsell.flickity-enabled button.flickity-button {
      right: 0;
      left: unset;
      width: 32px;
      height: 32px;
      transform: unset;
      top: unset;
      bottom: -40px;
  }
  .product-upsell.flickity-enabled button.flickity-button.previous { right: 45px; }
  .product-upsell.flickity-enabled ol.flickity-page-dots { width: auto; bottom: -35px; }
  .product-upsell.is-flickity-slider:not(.flickity-enabled) .upsell-item:not(:first-child) { display: none; }
  .product-upsell.layout--list .upsell-item .upsell-item-info { padding: 15px; }
  .product-upsell.layout--grid .upsell-item .upsell-item-banner { width: 100%; }
  .product-upsell.layout--list .upsell-item .upsell-item-banner { width: 25%; }
  .product-upsell.layout--list .upsell-item .upsell-item-info { width: 75%; display: flex; flex-flow: row; justify-content: space-between; gap: 15px;}
  .product-upsell.layout--list .upsell-item .upsell-item-info button.btn-circle {
      border-radius: 50%;
      width: 42px;
      height: 42px;
      display: inline-flex;
      align-items: center;
  }
  .product-upsell.layout--list .upsell-item .upsell-item-info form {
      display: flex;
      justify-content: flex-end;
  }
  .product-upsell.layout--grid .upsell-item .upsell-item-banner { box-shadow: 0 0 2px 0 rgba(0, 0, 0, .2); }
  .product-upsell .upsell-item .upsell-item-banner a:hover img { transform: scale(1.2); }
  .product-upsell .upsell-item .upsell-item-banner img { width: 100%; transition: .3s all ease-in-out; min-height: 130px; object-fit: contain; object-position: center; }
  @media(min-width: 481px){
    .product-upsell.layout--grid { flex-flow: row; }
    .product-upsell.layout--grid .upsell-item .upsell-item-info { margin-top: 10px; }
    .product-upsell.layout--grid .upsell-item { flex: 1; width: 33.33%; }
    .product-upsell.layout--list .upsell-item { width: 100%; }
  }
  @media(max-width: 480px){
    .product-upsell.layout--grid .upsell-item { flex: 1; width: 45%; margin-bottom: 10px; }
    .product-upsell.layout--list .upsell-item { width: 100%; }
  }
  
  .product-upsell .upsell-item {
      display: flex;
      flex-flow: column;
      padding: 2px;
  }
  .product-upsell .upsell-item .upsell-item-info {
      display: flex;
      flex-flow: column;
      font-size: 12px;
      line-height: normal;
      width: 100%;
      justify-content: space-between;
  }
  .product-upsell.layout--grid .upsell-item .upsell-item-info a {
      height: 30px;
  }
  .product-upsell .upsell-item .upsell-item-info a {
      color: inherit;
      text-decoration: none;
      font-family: var(--font-heading-family);
      text-overflow: ellipsis;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
  }
  .product-upsell .upsell-item .upsell-item-info span.selected-color { color: #000; font-weight: 700; }
  .product-upsell .upsell-item .upsell-item-info button {
      font-size: 10px;
      line-height: 12px;
      padding: 8px 10px 6px 10px !important;
      margin-top: 0 !important;
      min-height: unset;
      height: 32px;
  }
  .product-upsell .upsell-item .upsell-item-banner {
      border-radius: 0;
      overflow: hidden;
      background-color: #F3F3F3;
      display: inline-block;
  }
  .product-upsell-wrapper .heading { margin-bottom: 10px; display: inline-block; text-transform: normal; }
  .product-upsell .upsell-item, 
  .product-upsell .upsell-item .upsell-item-info, 
  .product-upsell .upsell-item .upsell-item-info form, 
  .product-upsell .upsell-item .upsell-item-info .upsell-item-info-content { row-gap: 7.5px; }
  .product-upsell .upsell-item .upsell-item-info .upsell-item-info-content, 
  .product-upsell .upsell-item .upsell-item-info form { display: flex; flex-flow: column; }
  .product-upsell .upsell-item .upsell-item-info form { margin: 0; }
  @media(max-width: 543px){
    .product-upsell { overflow-x: auto; }
  }

  .product-upsell .upsell-item button.btn-switch {
      width: 84px;
      height: 42px !important;
      border-radius: 30px;
      background: #ddd !important;
      padding: 0 !important;
  }
  .product-upsell .upsell-item button.btn-switch span {
      position: absolute;
      left: 2px;
      width: 38px;
      height: calc(100% - 4px);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      top: 2px;
      background-color: #b7b7b7;
      border-radius: 50%;
      pointer-events: none;
      transition: .3s all ease-in-out;
  }
  .product-upsell .upsell-item button.btn-switch[in-cart="true"] span {
      left: unset;
      background-color: #000;
  }
  .product-upsell .upsell-item button.btn-switch span svg { display: none; }
</style>

<!-- JSON -->

{
      "type": "upsell_addon",
      "name": "Upsell Addon",
      "limit": 1,
      "settings": [
        {
          "type": "text",
          "id": "title",
          "label": "Title"
        },
        {
          "type": "select",
          "id": "layout_style",
          "label": "Layout Style",
          "default": "grid",
          "options": [
            {
              "label": "Grid",
              "value": "grid",
            },
            {
              "label": "List",
              "value": "list",
            }
          ]
        },
        {
          "type": "select",
          "id": "button_style",
          "label": "Button Style",
          "default": "standard",
          "options": [
            {
              "label": "Standard",
              "value": "standard",
            },
            {
              "label": "Switch",
              "value": "switch",
            }
          ]
        },
        {
          "type": "header",
          "content": "Slider Settings"
        },
        {
          "type": "checkbox",
          "id": "enable_slider",
          "label": "Enable Slider",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "enable_desktop_slider",
          "label": "Enable Desktop Slider",
          "default": false
        },
        {
          "type": "checkbox",
          "id": "swipe_on_tab",
          "default": false,
          "label": "Enable Tab View Slider"
        },
        {
          "type": "checkbox",
          "id": "swipe_on_mobile",
          "default": false,
          "label": "Enable Mobile Slider"
        },
        {
          "type": "checkbox",
          "id": "show_dot",
          "default": false,
          "label": "Enable Dots"
        },
        {
          "type": "checkbox",
          "id": "show_arrows",
          "default": false,
          "label": "Enable Arrows"
        },
        {
          "type": "checkbox",
          "id": "light_arrows",
          "default": false,
          "label": "Light Arrows"
        },
        {
          "type": "checkbox",
          "id": "enable_autoplay",
          "default": false,
          "label": "Enable Autoplay"
        },
        {
          "type": "select",
          "id": "slider_mode",
          "options": [
            {
              "value": "left",
              "label": "Left"
            },
            {
              "value": "center",
              "label": "Center"
            },
            {
              "value": "right",
              "label": "Right"
            }
          ],
          "default": "left",
          "label": "Slider Cell Alignment"
        },
      ]
    },